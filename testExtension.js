(() => {
  let e=this;

  // べんりなどうぐばこ
  
  const U=(()=>{
    const 円しゅうりつ=3.1415926535897932384626;
    const どをラジアンに=円しゅうりつ/180;
    
    const せいすうリスト=(こすう)=>{
      let リスト=[];
      for(let せいすう=0;せいすう<こすう;++せいすう){
	リスト.push(せいすう);
      }
      return リスト;
    };

    const ベクターじげん=(ベクター)=>{return ベクター.length;};
    
    const ちょっこうベクター=(ベクター)=>{
      return [-ベクター[1],ベクター[0]];
    };

    const ぎゃくむきベクター=(ベクター)=>{
      return せいすうリスト(ベクターじげん(ベクター))
	.map((せいぶんラベル)=>{
	  return -ベクター[せいぶんラベル];
	});
    };
    const スカラーばい=(スカラー,ベクター)=>{
      return ベクター.map((せいぶん)=>{return スカラー*せいぶん;});
    };
    
    const ベクターたしざん=(ベクター1,ベクター2)=>{
      return せいすうリスト(ベクターじげん(ベクター1))
	.map((せいぶんラベル)=>{
	  return ベクター1[せいぶんラベル]+ベクター2[せいぶんラベル];
	});
    };

    const ベクターひきざん=(ベクター1,ベクター2)=>{
      return ベクターたしざん(ベクター1,ぎゃくむきベクター(ベクター2));
    };
    
    const ベクターかいてん=(かくど,ベクター)=>{
      return ベクターたしざん(
	スカラーばい(Math.cos(かくど*どをラジアンに),ベクター),
	スカラーばい(Math.sin(かくど*どをラジアンに),
		     ちょっこうベクター(ベクター)));
    };

    const へいこうとうえいき=(見るけいど,見るいど)=>{
      return (ベクター3D)=>{
	const ベクター2D1=[ベクター3D[0],ベクター3D[1]];
	const ベクター2D2=ベクターかいてん(-見るけいど,ベクター2D1);
	const ベクター3D2=[ベクター2D2[0],ベクター2D2[1],ベクター3D[2]];
	const ベクター2D3=[ベクター3D2[1],ベクター3D2[2]];
	const ベクター2D4=ベクターかいてん(-見るいど,ベクター2D3);
	return [ベクター3D2[0],ベクター2D4[0]];//,ベクター2D4[1]];
      };
    };

    const スクラッチリストすうち=(リスト,ばんごう)=>{
      const よんだリスト=リスト.trim().split(' ');
      return parseFloat(よんだリスト[ばんごう]);
    };

    const なにもしない=()=>{};
    
    return {
      スカラーばい:スカラーばい,
      スクラッチリストすうち:スクラッチリストすうち,
      せいすうリスト: せいすうリスト,
      ちょっこうベクター:ちょっこうベクター,
      どをラジアンに:どをラジアンに,
      なにもしない:なにもしない,
      ベクターたしざん:ベクターたしざん,
      ベクターひきざん:ベクターひきざん,
      ベクターかいてん:ベクターかいてん,
      へいこうとうえいき:へいこうとうえいき
    };
  })();


  // へいめんのかめ
 
  const へいめんのかめ=()=>{
    const ばしょとかめのしょきか=(ばしょせっていリスト,かめせっていリスト)=>{
      return ばしょとかめをつくる(
	[U.スクラッチリストすうち(かめせっていリスト,0),
	 U.スクラッチリストすうち(かめせっていリスト,1)],
	U.スクラッチリストすうち(かめせっていリスト,2));
    };
    
    const ばしょとかめをつくる=(いち,むき)=>{
      //alert(いち);
      return {ばしょ: 0, かめ: {いち:いち,むき:むき}};
    };
    
    const かめのいち=(ばしょかめ)=>{return ばしょかめ.かめ.いち;};

    const かめのx=(ばしょかめ)=>{return かめのいち(ばしょかめ)[0];};

    const かめのy=(ばしょかめ)=>{return かめのいち(ばしょかめ)[1];};

    const かめのむき=(ばしょかめ)=>{return ばしょかめ.かめ.むき;};
    
    const すすむ=(きょり,ばしょかめ)=>{
      const むき=かめのむき(ばしょかめ);
      const あたらしいかめのいち=
	    U.ベクターたしざん(
	      かめのいち(ばしょかめ),
	      U.スカラーばい(
		きょり,
		[Math.cos(むき*U.どをラジアンに),
		 Math.sin(むき*U.どをラジアンに)]));
      return ばしょとかめをつくる(あたらしいかめのいち,むき);
    };

    const 左にまわす=(かくど,ばしょかめ)=>{
      return ばしょとかめをつくる(
	かめのいち(ばしょかめ),かめのむき(ばしょかめ)+かくど);
    };

    return {
      ばしょとかめのしょきか:ばしょとかめのしょきか,
      かめのがめんx:かめのx,
      かめのがめんy:かめのy,
      かめのむき:かめのむき,
      すすむ:すすむ,
      左にまわす:左にまわす,
      ためし: U.なにもしない
    };
  };

  //りっぽうたいのかめ

  const りっぽうたいのかめ=()=>{
    const げんてんいち=[-100,-100];

    const ばしょとかめのしょきか=(ばしょせっていリスト,かめせっていリスト)=>{
      const へんのながさ=U.スクラッチリストすうち(ばしょせっていリスト,0);
      return ばしょとかめをつくる(
	りっぽうたい(
	  へんのながさ,
	  U.スクラッチリストすうち(ばしょせっていリスト,1),
	  U.スクラッチリストすうち(ばしょせっていリスト,2)),
	[へんのながさ*U.スクラッチリストすうち(かめせっていリスト,0),
	 へんのながさ*U.スクラッチリストすうち(かめせっていリスト,1)],
	U.スクラッチリストすうち(かめせっていリスト,2));
    };

    let とうえいき=U.なにもしない;
    let とうえい2Dざひょう=U.なにもしない;
    const りっぽうたい=(へんのながさ,見るけいど,見るいど)=>{
      とうえいき=U.へいこうとうえいき(見るけいど,見るいど);
      とうえい2Dざひょう=とうえい2Dざひょうかんすうをつくる(へんのながさ);
      return {
	へんのながさ:へんのながさ,
	ちょうてん:しょきちょうてん(へんのながさ)};
      };//なぜかラムダをオブジェクトに入れられない（入れても呼び出せない）。
   
    const ばしょとかめをつくる=(ばしょ,めんざひょう,むき)=>{
	return {
	  ばしょ: ばしょ,
	  かめ: かめをつくる(めんざひょう,むき)
	};
      };

    const かめをつくる=(めんざひょう,むき)=>{
      return {いち:めんざひょう,むき:むき};
    };
    
    const しょきちょうてん=(へんのながさ)=>{
      return [
	{しょきばんごう: 0, ざひょう3D:[0,0,0]},
	{しょきばんごう: 1, ざひょう3D:[0,0,へんのながさ]},
	{しょきばんごう: 2, ざひょう3D:[へんのながさ,0,へんのながさ]},
	{しょきばんごう: 3, ざひょう3D:[へんのながさ,0,0]},
	{しょきばんごう: 4, ざひょう3D:[0,へんのながさ,0]},
	{しょきばんごう: 5, ざひょう3D:[0,へんのながさ,へんのながさ]},
	{しょきばんごう: 6, ざひょう3D:[へんのながさ,へんのながさ,へんのながさ]},
	{しょきばんごう: 7, ざひょう3D:[へんのながさ,へんのながさ,0]}
      ];
    };

    const ちょうてん3Dざひょう=(ちょうてんリスト,ばんごう)=>{
      return ちょうてんリスト[ばんごう].ざひょう3D;
    };

    const ちょうてん2Dざひょう=(
      ちょうてんばんごう,ばしょかめ)=>{
	return U.ベクターたしざん(
	  とうえいき(
	    ばしょかめ.ばしょ.ちょうてん[ちょうてんばんごう].ざひょう3D),
	  げんてんいち);
      };

    const ぜんめんのちょうてん=(ばしょ)=>{
      const ちょうてんリスト=ばしょ.ちょうてん;
      return [ちょうてんリスト[0],ちょうてんリスト[1],
	      ちょうてんリスト[2],ちょうてんリスト[3]];
    };
    
    const とうえい2Dざひょうかんすうをつくる=(へんのながさ)=>{
      const ちょうてんリスト=しょきちょうてん(へんのながさ);
      const ちょうてん2D=ちょうてんリスト.map(
	(ちょうてん)=>{
	  return とうえいき(ちょうてん.ざひょう3D);
	});
      return (ぜんめんのちょうてん,めんざひょう)=>{
	const めんのxベクター=
	      U.ベクターひきざん(
		ちょうてん2D[ぜんめんのちょうてん[3].しょきばんごう],
		ちょうてん2D[ぜんめんのちょうてん[0].しょきばんごう]);
	const めんのyベクター=
	      U.ベクターひきざん(
		ちょうてん2D[ぜんめんのちょうてん[1].しょきばんごう],
		ちょうてん2D[ぜんめんのちょうてん[0].しょきばんごう]);
	      
	const せいきかめんざひょう=
	      U.スカラーばい(1/へんのながさ,めんざひょう);
	return U.ベクターたしざん(
	  U.ベクターたしざん(
	    ちょうてん2D[ぜんめんのちょうてん[0].しょきばんごう],
	    U.ベクターたしざん(
	      U.スカラーばい(せいきかめんざひょう[0],
			     めんのxベクター),
	      U.スカラーばい(せいきかめんざひょう[1],
			     めんのyベクター))),
	  げんてんいち);
      };
    };
      
    const かめのがめんざひょう=(ばしょかめ)=>{
      return とうえい2Dざひょう(
	ぜんめんのちょうてん(ばしょかめ.ばしょ),
	ばしょかめ.かめ.いち);
    };

    const かめのがめんx=(ばしょかめ)=>{
      return かめのがめんざひょう(ばしょかめ)[0];
    };

    const かめのがめんy=(ばしょかめ)=>{
      return かめのがめんざひょう(ばしょかめ)[1];
    };
    
    const かめのむき=(ばしょかめ)=>{return ばしょかめ.かめ.むき;};
    
    const すすむ=U.なにもしない;

    const 左にまわす=(かくど,ばしょかめ)=>{
      return ばしょとかめをつくる(
	ばしょかめ.ばしょ,
	かめのがめんざひょう(ばしょかめ),
	かめのむき(ばしょかめ)+かくど);
    };
    
    return {
      ばしょとかめのしょきか:ばしょとかめのしょきか,
      かめのがめんx:かめのがめんx,
      かめのがめんy:かめのがめんy,
      かめのむき:かめのむき,
      すすむ:すすむ,
      左にまわす:左にまわす,
      ためし:ちょうてん2Dざひょう
    };
  };
  

  // かくちょうブロックづくり
  
  // Cleanup function when the extension is unloaded
  e._shutdown = ()=>{};

  // Status reporting code
  // Use this to report missing hardware, plugin or unsupported browser
  e._getStatus = ()=>{
    return {status: 2, msg: 'Ready'};
  };

  /*e.ランダムにまつ = (コールバック) => {
    let まつじかん = Math.random();
    //console.log('Waiting for ' + wait + ' seconds');
    window.setTimeout(()=>{
      コールバック();
    }, まつじかん*1000);
  };*/

  //const モジュール=へいめんのかめ();
  const モジュール=りっぽうたいのかめ();

  e.ばしょとかめのしょきか=モジュール.ばしょとかめのしょきか;
  e.かめのがめんx=モジュール.かめのがめんx;
  e.かめのがめんy=モジュール.かめのがめんy;
  e.かめのむき=モジュール.かめのむき;
  e.すすむ=モジュール.すすむ;
  e.左にまわす=モジュール.左にまわす;
  e.ためし=モジュール.ためし;
  
  // Block and block menu descriptions
  let descriptor = {
    blocks: [
      // Block type, block name, function name
      ['r', '%n の %n ばんめ', 'はいれつをよむ','はいれつ', 'ばんごう'],
      ['r', 'ばしょとかめのしょきか %n %n',
       'ばしょとかめのしょきか','ばしょせってい','かめせってい'],
      ['r', '%n のx', 'かめのがめんx', 'かめ'],
      ['r', '%n のy', 'かめのがめんy', 'かめ'],
      ['r', '%n のむき', 'かめのむき', 'かめ'],
      ['r', '%n ぽ %n をすすめたかめ', 'すすむ', 'きょり','かめ'],
      ['r', '%n ど %n を左にまわしたかめ', '左にまわす', 'かくど','かめ'],
      ['r', ' %n ばんめの %n のちょうてん', 'ためし',
       'ばんごう','かめ'],
      //['w', 'ランダムにまつ', 'ランダムにまつ'],
    ]
  };
  
  // Register the extension
  ScratchExtensions.register('Turtle Graphics', descriptor, e);
})();
